name: 'Scan'

on:
  workflow_call:
    # inputs:
    #   username:
    #     required: true
    #     type: string
    # secrets:
    #   token:
    #     required: true

defaults:
  run:
    shell: bash

jobs:
  vulnerability:
    name: 'Vulnerability'
    runs-on: ubuntu-latest
    steps:
      - name: 'Checkout'
        uses: actions/checkout@v2
      - name: 'Cache Grype Database'
        uses: actions/cache@v2
        with:
          path: |
            ${{ runner.temp }}/.cache/grype
          key: grype
      - name: 'Set Job Vars'
        id: vars
        run: |
          echo "::set-output name=task_version::$(cat .tool-versions | grep -w task | cut -d ' ' -f2)"
      - name: 'Install asdf dependencies'
        uses: asdf-vm/actions/setup@v1
      - name: 'Install Task'
        uses: arduino/setup-task@v1
        with:
          version: ${{ steps.vars.outputs.task_version }}
      - name: 'Scan for Vulnerabilities'
        id: scan
        run: |
          set -e
          task security -- sarif
        env:
          GRYPE_DB_CACHE_DIR: ${{ runner.temp }}/.cache/grype
      - name: 'Upload SARIF reports'
        if: always()
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v1.0.31
        with:
          sarif_file: ./sarif-reports
      # # Keep it here in case we get a GitHub Advanced Security license
      # - name: 'Dedicated Grype scan for SARIF report creation'
      #   id: scan_grype
      #   uses: anchore/scan-action@v3.2.0
      #   with:
      #     path: './'
      #     fail-build: true
      #     acs-report-enable: true
      #   env:
      #     GRYPE_DB_CACHE_DIR: ${{ runner.temp }}/.cache/grype
      # - name: 'Upload SARIF Grype reports'
      #   if: always()
      #   continue-on-error: true
      #   uses: github/codeql-action/upload-sarif@v1.0.31
      #   with:
      #     sarif_file: ${{ steps.scan_grype.outputs.sarif }}
      # - name: 'Notify if any finding'
      #   if: always() && (steps.scan.outcome != 'success')  # || steps.scan_grype.outcome != 'success')
      #   uses: peter-evans/repository-dispatch@v1.1.3
      #   with:
      #     token: ${{ secrets.CI_GH_PAT_REPO_DISPATCH_API_AUTH }}
      #     event-type: slack-notification
      #     client-payload: '{ "type": "alert", "ref": "${{ github.ref }}", "sha": "${{ github.sha }}", "color": "#FF0000", "title": "ðŸš¨ ${{ github.repository }} Vulnerability", "message": "Check https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}" }'
